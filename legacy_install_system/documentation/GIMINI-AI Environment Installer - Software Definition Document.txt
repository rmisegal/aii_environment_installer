### Introduction

This document provides a comprehensive and detailed definition of the AI environment installer software package, based on a series of development logs. The software is designed to create a portable AI development environment on a removable D: drive, which is isolated from the host Windows 11 system.

***

### 1. Installation Software

This software is responsible for the automated setup of the entire AI environment. The process is managed by a central `install.bat` file and a Python-based installation manager.

#### **Key Features**
* **Automated Installation:** Performs a one-click installation of all required components and libraries.
* **Portability:** Installs the complete environment to a specified removable drive (D:), with no registry entries or system PATH changes. The installer requires a minimum of 60GB of free space on the D: drive and at least 16GB of RAM.
* **Resume Support:** The installer can be started from a specific step, allowing for the resumption of an interrupted installation.
* **Progress Tracking:** Tracks installation progress across 8 defined steps in a `installation_status.json` file.
* **Robust Error Handling:** Includes multiple fallback methods, detailed error logging, and timeout handling to prevent failures.
* **Conda-Based Environment:** Installs Miniconda, a professional Python environment manager, and creates a dedicated `AI2025` environment for improved package management.
* **Checksum Verification:** Verifies the integrity of downloaded files.
* **Automatic Post-Installation Check:** Prompts the user to run the validation program upon successful completion of the installation.

#### **Files Used**
* `install.bat`: The main batch file that initiates the installation.
* `install_manager.py`: The Python script that orchestrates the entire installation process. It includes logic for step skipping, progress tracking, and calling specialized modules.
* `download_manager.py`: Handles all file downloads, including progress tracking and error handling.
* `conda_downloader.py`: Specifically handles the download of the Miniconda installer.
* `conda_installer.py`: Manages the installation of Miniconda, including TOS acceptance and installation verification.
* `conda_manager.py`: Manages conda environments and packages. It now explicitly uses `pip` for packages like `torch`, `pandas`, and other data science libraries to avoid conda-related warnings and failures.
* `vscode_installer.py`: Installs a portable version of VS Code and AI-related extensions without user interaction.
* `ollama_installer.py`: Installs the Ollama server and downloads configured LLM models directly to the D: drive.
* `packages_installer.py`: Corrects package names (e.g., `langraph` to `langgraph`) and handles package installations.
* `step_tracker.py`: Creates and maintains a `installation_status.json` file to track the status of each installation step.

#### **Configuration**
* **Location:** The entire environment is installed to `D:\AI_Environment\`.
* **Miniconda Settings:** The installer configures a portable Miniconda installation with no shortcuts, no PATH changes, and no registration as the default Python.
* **LLM Models:** The default installation includes `llama2:7b`, `codellama:7b`, `mistral:7b`, `phi:2.7b`, and `gpt-oss:20b`.
* **Python Packages:** Includes over 30 AI/ML libraries like `LangChain`, `Streamlit`, `Pandas`, and `NumPy`.

***

### 2. Testing Software

This software validates the installed environment to ensure all components are functioning correctly.

#### **Key Features**
* **Comprehensive Testing Suite:** Includes 10 major test categories to validate system requirements, directory structure, and component functionality.
* **Real-time Progress:** Provides live test execution status and detailed logging.
* **JSON Reporting:** Generates a detailed JSON report with all test results, including PASS, WARN, FAIL, and ERROR classifications.
* **Conda Environment Validation:** The validator has been fixed to correctly check the conda environment structure and executables on the D: drive, replacing outdated checks for a virtual environment (venv).
* **Performance Benchmarking:** Measures startup times and disk I/O to ensure responsiveness.

#### **Files Used**
* `validate.bat`: A user-friendly batch file that runs the validation suite. The path for this script has been updated to correctly execute the Python validator.
* `system_validator.py`: The core Python script for the validation suite. It has been updated to use conda-specific paths and now correctly identifies the portable environment.

***

### 3. Removal Software

This software handles the uninstallation of the AI environment.

#### **Key Features**
* **Complete Removal:** Stops all running AI environment processes, removes the entire `D:\AI_Environment` folder, and cleans up temporary files.
* **Selective Removal:** Allows users to remove components starting from a specified step (e.g., `uninstall.bat --from-step 6`), preserving earlier, successful installations.
* **Confirmation Prompts:** Displays clear warning messages and requires confirmation before proceeding with either selective or complete removal.

#### **Files Used**
* `uninstall.bat`: The main batch file for uninstallation. It includes logic for selective and complete removal.
* `selective_uninstaller.py`: A Python script that performs the precise, step-by-step removal of components.
* `taskkill` is used to stop running processes.

***

### 4. Operating Software

This software provides the tools and scripts for the user to activate and use the installed AI environment.

#### **Key Features**
* **Portable Activation:** A batch file that automatically activates the `AI2025` conda environment from the D: drive and ensures the correct portable Python is used.
* **Automatic Installation of Missing Dependencies:** Checks for and automatically installs key packages like Flask if they are missing.
* **Ollama Server Management:** Automatically starts the Ollama server in the background and provides commands for manual management.
* **Clear User Interface:** Provides a color-coded interface and a list of available commands for easy use.

#### **Files Used**
* `activate_ai_env.bat`: The main batch file to activate the environment. It now includes logic to check for and clean up existing processes and environments, set PATH variables correctly, and manage terminal colors.
* `python.exe`: The Python executable located at `D:\AI_Environment\Miniconda\envs\AI2025\python.exe`.
* `conda.exe`: The conda executable located at `D:\AI_Environment\Miniconda\Scripts\conda.exe`.
* `ollama.exe`: The Ollama server executable located at `D:\AI_Environment\Ollama\ollama.exe`.