{
  "remaining_work": "Phase 2 Integration - Final 3 Tasks",
  "estimated_total_time": "30-45 minutes",
  "priority_order": ["HIGH", "MEDIUM", "MEDIUM"],

  "task1_extend_uninstaller": {
    "priority": "HIGH",
    "estimated_time": "15-20 minutes",
    "status": "PENDING",
    "description": "Extend automated_uninstaller.py to detect and remove AI_Lab",

    "current_state": {
      "ai_environment_detection": "Working",
      "ai_lab_detection": "Missing",
      "removal_logic": "Only handles AI_Environment"
    },

    "changes_needed": {
      "detection": [
        "Modify scan_drives_for_installations() to also check for AI_Lab at Drive:\\AI_Lab",
        "Add _verify_ai_lab() method to verify AI_Lab installation",
        "Detect both nested (External: Drive:\\AI_Lab\\AI_Environment) and side-by-side (Internal: Drive:\\AI_Lab, Drive:\\AI_Environment)"
      ],

      "removal_logic": [
        "Add remove_ai_lab() method",
        "Check if AI_Lab contains AI_Environment (nested) before removal",
        "For nested: Remove AI_Environment first, then AI_Lab parent",
        "For side-by-side: Remove both independently",
        "Verify AI_Lab is empty before removing (preserve user files if any)"
      ],

      "status_integration": [
        "Read from master_installation_status.json instead of just installation_status.json",
        "Update master status when uninstall completes",
        "Clear both ai_environment and ai_lab sections"
      ]
    },

    "implementation_steps": [
      "1. Add AI_Lab detection in scan_drives_for_installations()",
      "2. Create _verify_ai_lab() method",
      "3. Add ai_lab_path to installation info dict",
      "4. Update create_uninstall_plan() to handle AI_Lab",
      "5. Add remove_ai_lab() method to execute_uninstall()",
      "6. Test with both nested and side-by-side installations"
    ]
  },

  "task2_implement_resume": {
    "priority": "MEDIUM",
    "estimated_time": "10-15 minutes",
    "status": "PENDING",
    "description": "Implement resume functionality for interrupted installations",

    "current_state": {
      "status_detection": "Working - master_installation_status.json tracks progress",
      "menu_option": "Exists (option 4) but not implemented",
      "resume_info": "get_resume_info() method already exists in InstallationStatusManager"
    },

    "changes_needed": {
      "master_installer_py": [
        "Implement choice == '4' in run() method",
        "Call do_resume_installation() method",
        "Detect which component needs resuming (AI_Lab vs AI_Environment)",
        "Resume from last completed step"
      ],

      "resume_logic": [
        "If AI_Lab is processing: re-run ai_lab_installer with existing path",
        "If AI_Environment is processing: call install_ai_environment(start_step=last_step+1)",
        "If both completed but status says processing: mark as completed",
        "Handle uninstall_processing state (must complete uninstall first)"
      ]
    },

    "implementation_steps": [
      "1. Add do_resume_installation() method to MasterInstaller",
      "2. Check master status for resume info",
      "3. Determine resume point (AI_Lab or AI_Environment or both)",
      "4. Resume appropriate component with correct parameters",
      "5. Test with interrupted installation"
    ]
  },

  "task3_create_master_uninstall": {
    "priority": "MEDIUM",
    "estimated_time": "5-10 minutes",
    "status": "PENDING",
    "description": "Create MasterUninstall.bat entry point",

    "current_state": {
      "automated_uninstaller_py": "Exists and works for AI_Environment",
      "entry_point": "Missing"
    },

    "changes_needed": {
      "create_masteruninstall_bat": [
        "Copy structure from MasterInstall.bat",
        "Remove admin check (not needed for uninstall)",
        "Call automated_uninstaller.py with proper parameters",
        "Show menu: 1) Uninstall both, 2) AI_Environment only, 3) AI_Lab only, 4) Cancel"
      ],

      "menu_logic": [
        "Option 1: Call with no parameters (auto-detect and remove all)",
        "Option 2: Call with --ai-env-only flag (to be added)",
        "Option 3: Call with --ai-lab-only flag (to be added)",
        "Option 4: Exit"
      ]
    },

    "implementation_steps": [
      "1. Create MasterUninstall.bat based on MasterInstall.bat",
      "2. Simplify (no admin check needed)",
      "3. Add menu system with 4 options",
      "4. Call automated_uninstaller.py with appropriate flags",
      "5. Test all menu options"
    ]
  },

  "post_implementation_tasks": {
    "testing": [
      "Test resume functionality with interrupted installation",
      "Test MasterUninstall.bat with both installation types",
      "Test AI_Lab detection and removal",
      "Full end-to-end test: Install Internal → Uninstall",
      "Full end-to-end test: Install External → Uninstall"
    ],

    "deployment": [
      "Copy all changes from C:\\ClaudeScript\\AI_Environment_Installer-main to C:\\AI_Environment_Installer-main",
      "Verify Git status (if production is tracked)",
      "Create backup of production before deployment",
      "Test in production environment"
    ],

    "documentation": [
      "Update README with new auto-detect behavior",
      "Document resume functionality",
      "Document uninstall options",
      "Create user guide for MasterInstall.bat and MasterUninstall.bat"
    ]
  },

  "success_criteria": {
    "task1": "Uninstaller can detect and remove both AI_Lab and AI_Environment",
    "task2": "Resume works for both AI_Lab and AI_Environment interruptions",
    "task3": "MasterUninstall.bat provides clear menu and removes components correctly",
    "overall": "Complete installation/uninstallation system working for both Internal and External drives"
  }
}
